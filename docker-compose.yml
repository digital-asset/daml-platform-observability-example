---
# Copyright 2022 Digital Asset (Switzerland) GmbH and/or its affiliates
#
# SPDX-License-Identifier: Apache-2.0
#
volumes:
  canton:
  grafana:
  logs:
  loki:
  postgres:
  prometheus:

services:

  postgres:
    # Oldest supported PostgreSQL version
    # https://www.postgresql.org/support/versioning/
    image: postgres:11.18-bullseye
    container_name: daml_observability_postgres
    environment:
      # For default admin user 'postgres'
      POSTGRES_PASSWORD: postgres
    volumes:
      # PostgreSQL persistent data
      - postgres:/var/lib/postgresql/data
      # PostgreSQL bootstrap queries
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    # Wait for PostgreSQL to be up and ready after bootstrap
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  canton:
    image: digitalasset/canton:${CANTON_VERSION}
    container_name: daml_observability_canton
    build:
      context: canton
      dockerfile: Dockerfile
      args:
        CANTON_IMAGE: ${CANTON_IMAGE}
        CANTON_VERSION: ${CANTON_VERSION}
    ports:
      # Participant ledger API
      - 10011:10011
      # Participant admin API
      - 10012:10012
      # Domain public API
      - 10018:10018
      # Domain admin API
      - 10019:10019
      # Prometheus exporter
      - 19090:19090
    environment:
      CANTON_AUTO_APPROVE_AGREEMENTS: "yes"
      CANTON_ALLOCATE_PARTIES: "alice;bob"
      CANTON_CONNECT_DOMAINS: "mydomain#http://localhost:10018"
      JAVA_OPTS: "-Xmx3G"
    command:
      - "daemon"
      - "--log-level-root=${LOG_LEVEL:-INFO}"
      - "--log-level-canton=${LOG_LEVEL:-INFO}"
      - "--log-level-stdout=${LOG_LEVEL:-INFO}"
      - "--log-encoder=json"
      - "--log-file-name=/var/log/promtail/canton.log"
      - "--config=/canton/config/monitoring.conf"
      - "--config=/canton/config/postgres.conf"
      - "--config=/canton/config/participant.conf,/canton/config/domain.conf"
      - "--bootstrap=/canton/config/bootstrap.canton"
    volumes:
      # Canton configuration
      - ./canton:/canton/config
      # Canton persistent data
      - canton:/canton/data
      # Logs
      - logs:/var/log/promtail
    healthcheck:
      # Requires grpcurl and jq in image
      test: "grpcurl --plaintext localhost:10012 com.digitalasset.canton.health.admin.v0.StatusService.Status | jq -e '.success | select(.active)'"
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy

  console:
    image: ${CANTON_IMAGE}:${CANTON_VERSION}
    container_name: daml_observability_canton_console
    environment:
      JAVA_OPTS: "-Xmx1G"
    entrypoint: ["tail", "-f", "/dev/null"]
    stop_grace_period: "0s"
    volumes:
      # Canton configuration
      - ./canton:/canton/config
      # Logs
      - logs:/var/log/promtail
    depends_on:
      - canton

  http-json:
    image: digitalasset/http-json:${SDK_VERSION}
    container_name: daml_observability_http_json
    build:
      context: daml-service
      dockerfile: Dockerfile
      args:
        SDK_VERSION: ${SDK_VERSION}
        DAML_SERVICE: http-json
    ports:
      # HTTP JSON API
      - 4001:4001
      # Prometheus exporter
      - 19091:19091
    environment:
      JAVA_OPTS: "-Xmx1G"
    command:
      - "--log-level=${LOG_LEVEL:-INFO}"
      - "--log-encoder=json"
      - "--ledger-host=canton"
      - "--ledger-port=10011"
      - "--address=0.0.0.0"
      - "--http-port=4001"
      - "--metrics-reporter=prometheus://0.0.0.0:19091"
      - "--allow-insecure-tokens"
      - "--query-store-jdbc-config=driver=org.postgresql.Driver,url=jdbc:postgresql://postgres:5432/http_json?&ssl=false,user=canton,password=supersafe,start-mode=create-and-start"
    volumes:
      # Logs
      - logs:/var/log/promtail
    healthcheck:
      # Requires curl in image
      test: "curl -f localhost:4001/livez && curl -f localhost:4001/readyz"
      interval: 5s
      timeout: 1s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      canton:
        condition: service_healthy

  trigger-service:
    image: digitalasset/trigger-service:${SDK_VERSION}
    container_name: daml_observability_trigger_service
    build:
      context: daml-service
      dockerfile: Dockerfile
      args:
        SDK_VERSION: ${SDK_VERSION}
        DAML_SERVICE: trigger-service
    ports:
      - 4002:8088
      # Prometheus exporter
      - 19092:19090
    environment:
      JAVA_OPTS: "-Xmx1G"
      LOG_ENCODER_JSON: true
      LOG_LEVEL_ROOT: DEBUG
    command:
      - "--config=/trigger-service/config.conf"
    volumes:
      # Logs
      - logs:/var/log/promtail
      - ./trigger-service:/trigger-service
    healthcheck:
      # Requires curl in image
      test: "curl -f localhost:4002/livez && curl -f localhost:4002/readyz"
      interval: 5s
      timeout: 1s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      canton:
        condition: service_healthy

  navigator:
    image: digitalasset/daml-sdk:${SDK_VERSION}
    container_name: daml_observability_navigator
    ports:
      - 4003:4000
    command:
      - "daml"
      - "navigator"
      - "server"
      - "canton"
      - "10011"

  ##
  ## Monitoring services
  ##

  prometheus:
    # Oldest Prometheus LTS version
    # https://prometheus.io/docs/introduction/release-cycle/
    image: prom/prometheus:v2.37.5
    container_name: daml_observability_prometheus
    command:
      # Prometheus configuration
      - --config.file=/etc/prometheus/prometheus.yml
      # Prometheus data location
      - --storage.tsdb.path=/prometheus
      # Enable reload HTTP endpoint
      - --web.enable-lifecycle
      # Avoid local disk exhaustion
      - --storage.tsdb.retention.size=10GB
      - --storage.tsdb.retention.time=1d
    volumes:
      # Prometheus configuration
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # Prometheus persistent data
      - prometheus:/prometheus
    ports:
      - 9090:9090

  grafana:
    # Latest Grafana version
    # https://grafana.com/docs/grafana/latest/release-notes/
    image: grafana/grafana:9.3.6-ubuntu
    container_name: daml_observability_grafana
    volumes:
      # Grafana configuration
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      # Grafana data sources
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/default.yml
      # Grafana dashboard sources
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/default.yml
      # Grafana dashboards (auto-loading)
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      # Grafana persistent data
      - grafana:/var/lib/grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - loki
      - exporter

  exporter:
    # Prometheus Node Exporter
    # https://github.com/prometheus/node_exporter/
    image: prom/node-exporter:v1.4.1
    container_name: daml_observability_node_exporter

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.12.0
    container_name: daml_observability_postgres_exporter
    environment:
      DATA_SOURCE_USER: "postgres"
      DATA_SOURCE_PASS: "postgres"
      DATA_SOURCE_URI: "postgres:5432/postgres?sslmode=disable"
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: true
    volumes:
      # PostgreSQL Server Exporter configuration
      - ./postgres/postgres_exporter.yml:/postgres_exporter.yml

  loki:
    image: grafana/loki:2.7.3
    container_name: daml_observability_loki
    command: -config.file=/etc/loki/loki.yaml
    volumes:
      # Loki configuration
      - ./loki/loki.yaml:/etc/loki/loki.yaml
      # Loki persistent data
      - loki:/loki
    depends_on:
      - promtail

  promtail:
    image: grafana/promtail:2.7.3
    container_name: daml_observability_promtail
    command: -config.file=/etc/promtail/promtail.yml
    volumes:
      # Loki configuration
      - ./loki/promtail.yaml:/etc/promtail/promtail.yml
      # Logs to scrape
      - logs:/var/log/promtail
