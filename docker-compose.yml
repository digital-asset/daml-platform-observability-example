---
# Copyright 2022 Digital Asset (Switzerland) GmbH and/or its affiliates
#
# SPDX-License-Identifier: Apache-2.0
#
volumes:
  canton:
  grafana:
  logs:
  loki:
  postgres:
  prometheus:

services:

  postgres:
    # Oldest supported PostgreSQL version
    # https://www.postgresql.org/support/versioning/
    image: postgres:11.18-bullseye
    ports:
      - 5432:5432
    environment:
      # For default admin user 'postgres'
      POSTGRES_PASSWORD: postgres
    volumes:
      # PostgreSQL persistent data
      - postgres:/var/lib/postgresql/data
      # PostgreSQL bootstrap queries
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    # Wait for PostgreSQL to be up and ready after bootstrap
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  canton:
    image: ${CANTON_IMAGE:-digitalasset/canton-open-source}:${CANTON_VERSION:-latest}
    ports:
      # Participant ledger API
      - 10011:10011
      # Participant admin API
      - 10012:10012
      # Domain public API
      - 10018:10018
      # Domain admin API
      - 10019:10019
      # Prometheus exporter
      - 19090:19090
    environment:
      CANTON_AUTO_APPROVE_AGREEMENTS: "yes"
      CANTON_ALLOCATE_PARTIES: "alice;bob"
      CANTON_CONNECT_DOMAINS: "mydomain#http://localhost:10018"
      JAVA_OPTS: "-Xmx3G"
    command:
      - "daemon"
      - "--log-level-root=${LOG_LEVEL:-INFO}"
      - "--log-level-canton=${LOG_LEVEL:-INFO}"
      - "--log-level-stdout=${LOG_LEVEL:-INFO}"
      - "--log-encoder=json"
      - "--log-file-name=/var/log/promtail/canton.log"
      - "--config=/canton/config/monitoring.conf"
      - "--config=/canton/config/postgres.conf"
      - "--config=/canton/config/participant.conf,/canton/config/domain.conf"
      - "--bootstrap=/canton/config/bootstrap.canton"
    volumes:
      # Canton configuration
      - ./canton:/canton/config
      # Canton persistent data
      - canton:/canton/data
      # Logs
      - logs:/var/log/promtail
    depends_on:
      postgres:
        condition: service_healthy

  console:
    image: ${CANTON_IMAGE:-digitalasset/canton-open-source}:${CANTON_VERSION:-latest}
    environment:
      JAVA_OPTS: "-Xmx1G"
    entrypoint: ["tail", "-f", "/dev/null"]
    stop_grace_period: "0s"
    volumes:
      # Canton configuration
      - ./canton:/canton/config
      # Logs
      - logs:/var/log/promtail
    depends_on:
      - canton

  http-json:
    image: digitalasset/http-json:${SDK_VERSION}
    build:
      context: ./http-json
      dockerfile: Dockerfile
      args:
        SDK_VERSION: ${SDK_VERSION}
    ports:
      # HTTP JSON API
      - 4001:4001
      # Prometheus exporter
      - 19091:19091
    environment:
      JAVA_OPTS: "-Xmx1G"
    command:
      - "--log-level=${LOG_LEVEL:-INFO}"
      - "--log-encoder=json"
      - "--ledger-host=canton"
      - "--ledger-port=10011"
      - "--address=0.0.0.0"
      - "--http-port=4001"
      - "--metrics-reporter=prometheus://0.0.0.0:19091"
      - "--allow-insecure-tokens"
      - "--query-store-jdbc-config=driver=org.postgresql.Driver,url=jdbc:postgresql://postgres:5432/jsonapi?&ssl=false,user=canton,password=supersafe,start-mode=create-and-start"
    volumes:
      # Logs
      - logs:/var/log/promtail
    depends_on:
      postgres:
        condition: service_healthy
      canton:
        condition: service_started

  ##
  ## Monitoring services
  ##

  prometheus:
    # Oldest Prometheus LTS version
    # https://prometheus.io/docs/introduction/release-cycle/
    image: prom/prometheus:v2.37.5
    command:
      # Prometheus configuration
      - --config.file=/etc/prometheus/prometheus.yml
      # Prometheus data location
      - --storage.tsdb.path=/prometheus
      # Enable reload HTTP endpoint
      - --web.enable-lifecycle
      # Avoid local disk exhaustion
      - --storage.tsdb.retention.size=10GB
      - --storage.tsdb.retention.time=1d
    volumes:
      # Prometheus configuration
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # Prometheus persistent data
      - prometheus:/prometheus
    ports:
      - 9090:9090

  grafana:
    # Latest Grafana version
    # https://grafana.com/docs/grafana/latest/release-notes/
    image: grafana/grafana:9.3.6-ubuntu
    volumes:
      # Grafana configuration
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      # Grafana data sources
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/default.yml
      # Grafana dashboard sources
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/default.yml
      # Grafana dashboards (auto-loading)
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      # Grafana persistent data
      - grafana:/var/lib/grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - loki
      - exporter

  exporter:
    # Prometheus Node Exporter
    # https://github.com/prometheus/node_exporter/
    image: prom/node-exporter:v1.4.1
    ports:
      - 9100:9100

  loki:
    image: grafana/loki:2.7.3
    command: -config.file=/etc/loki/loki.yaml
    volumes:
      # Loki configuration
      - ./loki/loki.yaml:/etc/loki/loki.yaml
      # Loki persistent data
      - loki:/loki
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
      - promtail

  promtail:
    image: grafana/promtail:2.7.3
    command: -config.file=/etc/promtail/promtail.yml
    volumes:
      # Loki configuration
      - ./loki/promtail.yaml:/etc/promtail/promtail.yml
      # Logs to scrape
      - logs:/var/log/promtail
    ports:
      - "5100:5100"
      - "5101:5101"
